@model FhirCouchbaseDemo.Web.ViewModels.UploadPageViewModel
@{
    ViewData["Title"] = "Upload FHIR Bundles";
}

<h1 class="display-6 mb-4">Upload FHIR Bundles</h1>
<p class="text-muted">Drag and drop one or more FHIR bundles (XML or JSON) or browse to select files. Each bundle is converted to canonical FHIR JSON (or kept as-is when already JSON) and persisted in Couchbase.</p>

@{
    var activeTab = string.IsNullOrWhiteSpace(Model.ActiveTab) ? "files" : Model.ActiveTab;
}

<ul class="nav nav-tabs mb-3" id="uploadTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link @(activeTab == "files" ? "active" : string.Empty)"
                id="tab-files-tab"
                data-bs-toggle="tab"
                data-bs-target="#tab-files"
                type="button"
                role="tab"
                aria-controls="tab-files"
                aria-selected="@(activeTab == "files" ? "true" : "false")">
            Upload files
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link @(activeTab == "s3" ? "active" : string.Empty)"
                id="tab-s3-tab"
                data-bs-toggle="tab"
                data-bs-target="#tab-s3"
                type="button"
                role="tab"
                aria-controls="tab-s3"
                aria-selected="@(activeTab == "s3" ? "true" : "false")">
            Import from S3 / MinIO
        </button>
    </li>
</ul>

<div class="tab-content mb-5" id="uploadTabsContent">
    <div class="tab-pane fade @(activeTab == "files" ? "show active" : string.Empty)" id="tab-files" role="tabpanel" aria-labelledby="tab-files-tab">
        <form asp-action="Upload" method="post" enctype="multipart/form-data" class="border rounded p-4 bg-light-subtle" id="upload-form">
            @Html.AntiForgeryToken()
            <div class="mb-3">
                <label asp-for="Files" class="form-label"></label>
                <input asp-for="Files" type="file" class="d-none" accept=".xml,.json" multiple />
                <span asp-validation-for="Files" class="text-danger"></span>

                <div id="drop-zone" class="drop-zone" role="button" tabindex="0">
                    <div class="drop-zone__icon" aria-hidden="true">⬆️</div>
                    <p class="mb-1">Drop files here or</p>
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="browse-button">Browse files</button>
                    <p class="text-muted small mt-2 mb-0">Accepted types: .xml, .json (multiple files supported)</p>
                </div>

                <ul id="selected-files" class="file-list mt-3"></ul>
            </div>

            <div class="mt-4">
                <button type="submit" class="btn btn-primary">Upload to Couchbase</button>
            </div>
        </form>
    </div>
    <div class="tab-pane fade @(activeTab == "s3" ? "show active" : string.Empty)" id="tab-s3" role="tabpanel" aria-labelledby="tab-s3-tab">
        <div class="border rounded p-4 bg-light-subtle">
            <h2 class="h5">Import bundles from S3 or MinIO</h2>
            <p class="text-muted">Fetch sample prescriptions directly from an S3-compatible bucket (AWS S3 or MinIO) and ingest them into Couchbase.</p>

            @if (!Model.HasS3Configuration)
            {
                <div class="alert alert-warning" role="alert">
                    Configure S3 credentials on the <a asp-action="Connection" asp-controller="Prescriptions">Connection page</a> before running an import.
                </div>
            }
            else
            {
                <div class="card border-0 shadow-sm mb-3">
                    <div class="card-body">
                        <p class="mb-2"><strong>Current configuration</strong></p>
                        <dl class="row mb-0 small">
                            <dt class="col-sm-3">Bucket</dt>
                            <dd class="col-sm-9">@Model.StoredS3Settings!.BucketName</dd>
                            <dt class="col-sm-3">Region</dt>
                            <dd class="col-sm-9">@Model.StoredS3Settings.Region</dd>
                            <dt class="col-sm-3">Endpoint</dt>
                            <dd class="col-sm-9">@(!string.IsNullOrWhiteSpace(Model.StoredS3Settings.EndpointUrl) ? Model.StoredS3Settings.EndpointUrl : "AWS default")</dd>
                            <dt class="col-sm-3">Default prefix</dt>
                            <dd class="col-sm-9">@(!string.IsNullOrWhiteSpace(Model.StoredS3Settings.DefaultPrefix) ? Model.StoredS3Settings.DefaultPrefix : "Not set")</dd>
                        </dl>
                    </div>
                </div>

                <form asp-action="ImportFromS3" method="post">
                    @Html.AntiForgeryToken()
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="row g-3">
                        <div class="col-md-9">
                            <label asp-for="S3Import.Prefix" class="form-label"></label>
                            <input asp-for="S3Import.Prefix" class="form-control" placeholder="samples/erezept/2025/" />
                            <span class="form-text">
                                Use a folder-style prefix (e.g. <code>samples/erezept/2025/</code>). Leave blank to scan the entire bucket (the last prefix you used is remembered).
                            </span>
                            <span asp-validation-for="S3Import.Prefix" class="text-danger"></span>
                        </div>
                        <div class="col-md-3">
                            <label asp-for="S3Import.MaxKeys" class="form-label"></label>
                            <input asp-for="S3Import.MaxKeys" class="form-control" type="number" min="1" max="500" />
                            <span asp-validation-for="S3Import.MaxKeys" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="mt-4 d-flex justify-content-end">
                        <button type="submit" class="btn btn-outline-primary">Fetch from bucket</button>
                    </div>
                </form>

                @if (Model.S3Summary is not null)
                {
                    <div class="alert @(Model.S3Summary.Failed > 0 ? "alert-warning" : "alert-info") mt-4" role="alert">
                        <strong>Import summary:</strong>
                        <ul class="mb-0">
                            <li>Objects discovered: <strong>@Model.S3Summary.Discovered</strong></li>
                            <li>Documents imported: <strong>@Model.S3Summary.Imported</strong></li>
                            <li>Errors: <strong>@Model.S3Summary.Failed</strong></li>
                        </ul>
                    </div>
                }
            }
        </div>
    </div>
</div>

@if (Model.Result is not null)
{
    <section class="mb-5">
        <h2 class="h4">Upload summary</h2>
        <p class="text-muted">Documents stored: <strong>@Model.Result.StoredRecords.Count</strong></p>

        @if (Model.Result.Warnings.Count > 0)
        {
            <div class="alert alert-warning" role="alert">
                <strong>Warnings</strong>
                <ul class="mb-0">
                    @foreach (var warning in Model.Result.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }

        @if (Model.Result.Failures.Count > 0)
        {
            <div class="alert alert-danger" role="alert">
                <strong>Failed uploads</strong>
                <ul class="mb-0">
                    @foreach (var failure in Model.Result.Failures)
                    {
                        <li><strong>@failure.FileName:</strong> @failure.ErrorMessage</li>
                    }
                </ul>
            </div>
        }

        @if (Model.Result.StoredRecords.Count > 0)
        {
            <div class="table-responsive mt-3">
                <table class="table table-sm table-striped">
                    <thead>
                        <tr>
                            <th>File</th>
                            <th>Primary PZN</th>
                            <th>PZNs</th>
                            <th>Issue date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var record in Model.Result.StoredRecords)
                        {
                            <tr>
                                <td>@record.FileName</td>
                                <td>@record.PrimaryPzn</td>
                                <td>@string.Join(", ", record.PznCodes)</td>
                                <td>@record.IssueDate?.ToString("u")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </section>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            const fileInput = document.getElementById('Files');
            const dropZone = document.getElementById('drop-zone');
            const browseButton = document.getElementById('browse-button');
            const fileList = document.getElementById('selected-files');

            if (!fileInput || !dropZone || !browseButton || !fileList) {
                return;
            }

            const acceptsFile = (file) => file && (
                file.type === 'text/xml' ||
                file.type === 'application/xml' ||
                file.type === 'application/json' ||
                file.name.toLowerCase().endsWith('.xml') ||
                file.name.toLowerCase().endsWith('.json')
            );

            const setFiles = (files) => {
                if (!window.DataTransfer) {
                    fileInput.files = files;
                    renderFileList();
                    return;
                }

                const dataTransfer = new DataTransfer();
                Array.from(files).forEach(file => {
                    if (acceptsFile(file)) {
                        dataTransfer.items.add(file);
                    }
                });
                fileInput.files = dataTransfer.files;
                renderFileList();
            };

            const appendFiles = (files) => {
                if (!window.DataTransfer) {
                    setFiles(files);
                    return;
                }

                const dataTransfer = new DataTransfer();
                Array.from(fileInput.files).forEach(existing => dataTransfer.items.add(existing));
                Array.from(files).forEach(file => {
                    if (acceptsFile(file)) {
                        dataTransfer.items.add(file);
                    }
                });
                fileInput.files = dataTransfer.files;
                renderFileList();
            };

            const renderFileList = () => {
                fileList.innerHTML = '';
                if (!fileInput.files || fileInput.files.length === 0) {
                    const emptyItem = document.createElement('li');
                    emptyItem.className = 'text-muted fst-italic';
                    emptyItem.textContent = 'No files selected yet.';
                    fileList.appendChild(emptyItem);
                    return;
                }

                Array.from(fileInput.files).forEach(file => {
                    const item = document.createElement('li');
                    item.innerHTML = `<strong>${file.name}</strong> <span class="text-muted">(${(file.size / 1024).toFixed(1)} KB)</span>`;
                    fileList.appendChild(item);
                });
            };

            browseButton.addEventListener('click', () => fileInput.click());
            dropZone.addEventListener('click', () => fileInput.click());

            dropZone.addEventListener('dragover', (event) => {
                event.preventDefault();
                dropZone.classList.add('drop-zone--active');
            });

            dropZone.addEventListener('dragleave', () => {
                dropZone.classList.remove('drop-zone--active');
            });

            dropZone.addEventListener('drop', (event) => {
                event.preventDefault();
                dropZone.classList.remove('drop-zone--active');
                const files = event.dataTransfer?.files;
                if (!files || files.length === 0) {
                    return;
                }
                appendFiles(files);
            });

            fileInput.addEventListener('change', () => setFiles(fileInput.files));

            renderFileList();
        })();
    </script>
}
